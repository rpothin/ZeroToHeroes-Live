name: deploy-solution-to-production
# Deploy updated solution to Production on a push to the solutions folder in the main branch

# Workflow triggered automatically bu a push to the solutions folder in the main branch
on:
  push:
    branches: [ main ]
    paths:
      - 'solutions/**'
      - 'configurations/**'
      - '!.gitignore'
      - '!LICENSE'
      - '!README.md'

# Environment variables
env:
  SOLUTION_VERSION_MAJOR: '1'

jobs:
  # Job to initialize a variable for other jobs in the workflow
  pre-job:
    runs-on: ubuntu-latest
    outputs:
      solution-name: '${{ steps.changed-solution.outputs.solution-name }}'
    env:
      RUNNER_DEBUG: 1

    steps:
      # Action used to checkout the main branch in the current repository
      #   Community action: https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      # Get files changed in the context of the pull request
      #   Action: https://github.com/marketplace/actions/changed-files
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v34.0.5

      # Get changed solution from changed files
      - name: Get changed solution
        run: |
          # Variables
          $changedSolutionFound = $false
          $filesChangedTemp = "${{ steps.changed-files.outputs.all_changed_files }}"
          $filesChanged = $filesChangedTemp.Split(" ")
          $solutionName = ""
          $solutionNameBackup = ""

          Write-Host "========== Search updated solution in changed files =========="
          foreach ($fileChanged in $filesChanged) {
            Write-Host "$fileChanged"
            $fileChangedArray = $fileChanged.Split("/")

            if ($fileChanged.Contains("solutions/") -and (-not($changedSolutionFound))) {
              $solutionName = $fileChangedArray[1]
            }

            if ($fileChanged.Contains("Configurations/") -and (-not($changedSolutionFound))) {
              $solutionNameBackup = $fileChangedArray[1]
            }
          }

          if ($solutionName -eq "") {
            Write-Host "âš  Only configurations udpated"
            $solutionName = $solutionNameBackup
          }

          echo "Solution name: $solutionName"
          echo "SOLUTION_NAME=$solutionName" >> $Env:GITHUB_ENV
        shell: pwsh

      - name: Set output for changed solution
        id: changed-solution
        run: echo "solution-name=${{ env.SOLUTION_NAME }}" >> $GITHUB_OUTPUT


  # Job to build a managed version of a solution using a just-in-time Build environment
  build-managed-solution:
    needs: pre-job
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      # Action used to checkout the main branch in the current repository
      #   Community action: https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3.1.0

      # Initialize the solution version
      - name: Set solution version variable
        run: |
          $currentDate = Get-Date -Format "yyyyMMdd"
          $solutionVersion = "${{ env.SOLUTION_VERSION_MAJOR }}.$currentDate.${{ github.run_number }}"
          echo "SOLUTION_VERSION=$solutionVersion" >> $Env:GITHUB_ENV
        shell: pwsh

      # Set the solution version in the Solution.xml file
      - name: Set solution version
        run: |
          $file = 'solutions\${{ needs.pre-job.outputs.solution-name }}\Other\Solution.xml'
          $regex = '<Version>[\s\S]*?<\/Version>'
          (Get-Content $file) -replace $regex, '<Version>${{ env.SOLUTION_VERSION }}</Version>' | Set-Content $file
        shell: pwsh

      # Pack the considered solution as managed
      #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/pack-solution/action.yml
      - name: Pack solution
        uses: microsoft/powerplatform-actions/pack-solution@main
        with:
          solution-folder: solutions/${{ needs.pre-job.outputs.solution-name }}
          solution-file: out/solutions/${{ needs.pre-job.outputs.solution-name }}_managed.zip
          solution-type: Managed
          process-canvas-apps: true

      # Upload the managed solution we got in the previous step to the GitHub artifact store
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Upload the ready to ship solution to GH artifact store
        uses: actions/upload-artifact@v3
        with:
          name: managedSolutions
          path: out/solutions/${{ needs.pre-job.outputs.solution-name }}_managed.zip
  
  # Job to import a solution to an environment and execute post deployment actions
  import-solution-to-production:
    needs: [pre-job, build-managed-solution]
    environment:
      name: production
    runs-on: windows-latest
    env:
      RUNNER_DEBUG: 1

    steps:
      # Action used to checkout the main branch in the current repository
      #   Community action: https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3.1.0

      # Get the content of the GitHub artifact store prepared in a previous job
      #   Action: https://docs.github.com/en/free-pro-team@latest/actions/guides/storing-workflow-data-as-artifacts
      - name: Get solution from GH artifact store
        uses: actions/download-artifact@v3
        with:
          name: managedSolutions
          path: out/managedSolutions/
      
      # Import the considered solution to the targeted environment
      #   Microsoft action: https://github.com/microsoft/powerplatform-actions/blob/main/import-solution/action.yml
      - name: Import solution to Production
        uses: microsoft/powerplatform-actions/import-solution@main
        with:
          app-id: ${{ secrets.APPLICATION_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          environment-url: ${{ secrets.DATAVERSE_ENVIRONMENT_URL }}
          solution-file: out/managedSolutions/${{ needs.pre-job.outputs.solution-name }}_managed.zip
          force-overwrite: false
          publish-changes: true
          skip-dependency-check: false
          run-asynchronously: true
          max-async-wait-time: 10
          use-deployment-settings-file: true
          deployment-settings-file: configurations/${{ needs.pre-job.outputs.solution-name }}/DeploymentSettings.json

      # Complementary steps after solution import
      #   - Turn on cloud flows
      - name: Steps post solution import
        run: |
          echo "========== Install Microsoft.PowerApps.Administration.PowerShel module =========="
          Install-Module -Name Microsoft.PowerApps.Administration.PowerShell -Scope CurrentUser -Force

          echo "========== Install Microsoft.Xrm.Data.PowerShell module =========="
          Install-Module Microsoft.Xrm.Data.PowerShell -Scope CurrentUser -Force

          echo "==========  Set params =========="
          $Params = @{
            ClientId = "${{ secrets.APPLICATION_ID }}"
            ClientSecret = "${{ secrets.CLIENT_SECRET }}"
            DataverseEnvironmentUrl = "${{ secrets.DATAVERSE_ENVIRONMENT_URL }}"
            SolutionName = "${{ needs.pre-job.outputs.solution-name }}"
            SolutionComponentsOwnerEmail = "${{ secrets.SOLUTION_COMPONENTS_OWNER_EMAIL }}"
            MaximumTries = "3"
          }

          echo "==========  Enable-CloudFlows =========="
          Import-Module ./scripts/Enable-CloudFlows.ps1 -Force

          Enable-CloudFlows @Params -verbose
        shell: powershell